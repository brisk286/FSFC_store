// Copyright 2022 <mzh.scnu@qq.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        v3.20.1
// source: arith.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Rpc1Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filenames []string `protobuf:"bytes,1,rep,name=Filenames,proto3" json:"Filenames,omitempty"`
}

func (x *Rpc1Request) Reset() {
	*x = Rpc1Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arith_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rpc1Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rpc1Request) ProtoMessage() {}

func (x *Rpc1Request) ProtoReflect() protoreflect.Message {
	mi := &file_arith_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rpc1Request.ProtoReflect.Descriptor instead.
func (*Rpc1Request) Descriptor() ([]byte, []int) {
	return file_arith_proto_rawDescGZIP(), []int{0}
}

func (x *Rpc1Request) GetFilenames() []string {
	if x != nil {
		return x.Filenames
	}
	return nil
}

type Rpc1Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileBlockHashes []*FileBlockHash `protobuf:"bytes,1,rep,name=FileBlockHashes,proto3" json:"FileBlockHashes,omitempty"`
}

func (x *Rpc1Response) Reset() {
	*x = Rpc1Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arith_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rpc1Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rpc1Response) ProtoMessage() {}

func (x *Rpc1Response) ProtoReflect() protoreflect.Message {
	mi := &file_arith_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rpc1Response.ProtoReflect.Descriptor instead.
func (*Rpc1Response) Descriptor() ([]byte, []int) {
	return file_arith_proto_rawDescGZIP(), []int{1}
}

func (x *Rpc1Response) GetFileBlockHashes() []*FileBlockHash {
	if x != nil {
		return x.FileBlockHashes
	}
	return nil
}

type Rpc2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename       string       `protobuf:"bytes,1,opt,name=Filename,proto3" json:"Filename,omitempty"`
	RsyncOpPbs     []*RSyncOpPb `protobuf:"bytes,2,rep,name=RsyncOpPbs,proto3" json:"RsyncOpPbs,omitempty"`
	ModifiedLength int32        `protobuf:"varint,3,opt,name=ModifiedLength,proto3" json:"ModifiedLength,omitempty"`
}

func (x *Rpc2Request) Reset() {
	*x = Rpc2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arith_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rpc2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rpc2Request) ProtoMessage() {}

func (x *Rpc2Request) ProtoReflect() protoreflect.Message {
	mi := &file_arith_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rpc2Request.ProtoReflect.Descriptor instead.
func (*Rpc2Request) Descriptor() ([]byte, []int) {
	return file_arith_proto_rawDescGZIP(), []int{2}
}

func (x *Rpc2Request) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Rpc2Request) GetRsyncOpPbs() []*RSyncOpPb {
	if x != nil {
		return x.RsyncOpPbs
	}
	return nil
}

func (x *Rpc2Request) GetModifiedLength() int32 {
	if x != nil {
		return x.ModifiedLength
	}
	return 0
}

type Rpc2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename float64 `protobuf:"fixed64,1,opt,name=Filename,proto3" json:"Filename,omitempty"`
}

func (x *Rpc2Response) Reset() {
	*x = Rpc2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arith_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rpc2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rpc2Response) ProtoMessage() {}

func (x *Rpc2Response) ProtoReflect() protoreflect.Message {
	mi := &file_arith_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rpc2Response.ProtoReflect.Descriptor instead.
func (*Rpc2Response) Descriptor() ([]byte, []int) {
	return file_arith_proto_rawDescGZIP(), []int{3}
}

func (x *Rpc2Response) GetFilename() float64 {
	if x != nil {
		return x.Filename
	}
	return 0
}

type FileBlockHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename    string       `protobuf:"bytes,1,opt,name=Filename,proto3" json:"Filename,omitempty"`
	BlockHashes []*BlockHash `protobuf:"bytes,2,rep,name=BlockHashes,proto3" json:"BlockHashes,omitempty"`
}

func (x *FileBlockHash) Reset() {
	*x = FileBlockHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arith_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileBlockHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileBlockHash) ProtoMessage() {}

func (x *FileBlockHash) ProtoReflect() protoreflect.Message {
	mi := &file_arith_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileBlockHash.ProtoReflect.Descriptor instead.
func (*FileBlockHash) Descriptor() ([]byte, []int) {
	return file_arith_proto_rawDescGZIP(), []int{4}
}

func (x *FileBlockHash) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *FileBlockHash) GetBlockHashes() []*BlockHash {
	if x != nil {
		return x.BlockHashes
	}
	return nil
}

type BlockHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      int32  `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	StrongHash []byte `protobuf:"bytes,2,opt,name=StrongHash,proto3" json:"StrongHash,omitempty"`
	WeakHash   uint32 `protobuf:"varint,3,opt,name=WeakHash,proto3" json:"WeakHash,omitempty"`
}

func (x *BlockHash) Reset() {
	*x = BlockHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arith_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHash) ProtoMessage() {}

func (x *BlockHash) ProtoReflect() protoreflect.Message {
	mi := &file_arith_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHash.ProtoReflect.Descriptor instead.
func (*BlockHash) Descriptor() ([]byte, []int) {
	return file_arith_proto_rawDescGZIP(), []int{5}
}

func (x *BlockHash) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BlockHash) GetStrongHash() []byte {
	if x != nil {
		return x.StrongHash
	}
	return nil
}

func (x *BlockHash) GetWeakHash() uint32 {
	if x != nil {
		return x.WeakHash
	}
	return 0
}

type RSyncOpPb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpCode     int32  `protobuf:"varint,1,opt,name=OpCode,proto3" json:"OpCode,omitempty"`
	Data       []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	BlockIndex int32  `protobuf:"varint,3,opt,name=BlockIndex,proto3" json:"BlockIndex,omitempty"`
}

func (x *RSyncOpPb) Reset() {
	*x = RSyncOpPb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arith_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RSyncOpPb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RSyncOpPb) ProtoMessage() {}

func (x *RSyncOpPb) ProtoReflect() protoreflect.Message {
	mi := &file_arith_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RSyncOpPb.ProtoReflect.Descriptor instead.
func (*RSyncOpPb) Descriptor() ([]byte, []int) {
	return file_arith_proto_rawDescGZIP(), []int{6}
}

func (x *RSyncOpPb) GetOpCode() int32 {
	if x != nil {
		return x.OpCode
	}
	return 0
}

func (x *RSyncOpPb) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RSyncOpPb) GetBlockIndex() int32 {
	if x != nil {
		return x.BlockIndex
	}
	return 0
}

var File_arith_proto protoreflect.FileDescriptor

var file_arith_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x72, 0x69, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x0b, 0x52, 0x70, 0x63, 0x31, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x0c, 0x52, 0x70, 0x63, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x52, 0x70, 0x63, 0x32, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x0a, 0x52, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x50, 0x62, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x52, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x50, 0x62, 0x52, 0x0a, 0x52, 0x73, 0x79, 0x6e, 0x63,
	0x4f, 0x70, 0x50, 0x62, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x2a, 0x0a,
	0x0c, 0x52, 0x70, 0x63, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x0d, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x09,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x57, 0x65, 0x61, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x57, 0x65, 0x61, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x57, 0x0a, 0x09, 0x52,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x50, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x32, 0x95, 0x01, 0x0a, 0x0c, 0x52, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x14, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x31, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x70,
	0x63, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x11, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x73, 0x12,
	0x14, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x32, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x52, 0x70, 0x63, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0b, 0x5a, 0x09,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_arith_proto_rawDescOnce sync.Once
	file_arith_proto_rawDescData = file_arith_proto_rawDesc
)

func file_arith_proto_rawDescGZIP() []byte {
	file_arith_proto_rawDescOnce.Do(func() {
		file_arith_proto_rawDescData = protoimpl.X.CompressGZIP(file_arith_proto_rawDescData)
	})
	return file_arith_proto_rawDescData
}

var file_arith_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_arith_proto_goTypes = []interface{}{
	(*Rpc1Request)(nil),   // 0: message.Rpc1Request
	(*Rpc1Response)(nil),  // 1: message.Rpc1Response
	(*Rpc2Request)(nil),   // 2: message.Rpc2Request
	(*Rpc2Response)(nil),  // 3: message.Rpc2Response
	(*FileBlockHash)(nil), // 4: message.FileBlockHash
	(*BlockHash)(nil),     // 5: message.BlockHash
	(*RSyncOpPb)(nil),     // 6: message.RSyncOpPb
}
var file_arith_proto_depIdxs = []int32{
	4, // 0: message.Rpc1Response.FileBlockHashes:type_name -> message.FileBlockHash
	6, // 1: message.Rpc2Request.RsyncOpPbs:type_name -> message.RSyncOpPb
	5, // 2: message.FileBlockHash.BlockHashes:type_name -> message.BlockHash
	0, // 3: message.RsyncService.CalculateBlockHashes:input_type -> message.Rpc1Request
	2, // 4: message.RsyncService.CalculateRSyncOps:input_type -> message.Rpc2Request
	1, // 5: message.RsyncService.CalculateBlockHashes:output_type -> message.Rpc1Response
	3, // 6: message.RsyncService.CalculateRSyncOps:output_type -> message.Rpc2Response
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_arith_proto_init() }
func file_arith_proto_init() {
	if File_arith_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arith_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rpc1Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arith_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rpc1Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arith_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rpc2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arith_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rpc2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arith_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileBlockHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arith_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arith_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RSyncOpPb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arith_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_arith_proto_goTypes,
		DependencyIndexes: file_arith_proto_depIdxs,
		MessageInfos:      file_arith_proto_msgTypes,
	}.Build()
	File_arith_proto = out.File
	file_arith_proto_rawDesc = nil
	file_arith_proto_goTypes = nil
	file_arith_proto_depIdxs = nil
}
