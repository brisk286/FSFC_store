// Code generated by protoc-gen-tinyrpc.

package protocol

import (
	"fmt"
	"fsfc_store/fs"
	"fsfc_store/rsync"
	"io/ioutil"
	"time"
)

// RsyncService Defining Computational Digital Services
type RsyncService struct{}

// CalculateBlockHashes 11
func (this *RsyncService) CalculateBlockHashes(args *Rpc1Request, reply *Rpc1Response) error {
	//reply.C = args.A + args.B
	fmt.Println("调用store端方法：CalculateBlockHashes")

	var changedFiles []string
	changedFiles = args.Filenames
	fmt.Println("接收到修改文件")

	var hashesFiles []rsync.FileBlockHashes
	for _, filename := range changedFiles {
		err := fs.MkdirAllFile(filename)
		if err != nil {
			fmt.Println(filename)
			panic("文件创建发生错误")
		}

		originalFile, err := ioutil.ReadFile(filename)
		if err != nil {
			fmt.Println("未找到远程端文件")
		}
		fmt.Println("读取远程文件成功", filename)

		fmt.Println("计算BlockHashes")
		hashes := rsync.CalculateBlockHashes(originalFile)

		fmt.Println("计算BlockHashes完成", filename)
		hashesFiles = append(hashesFiles, rsync.FileBlockHashes{Filename: filename, BlockHashes: hashes})
	}

	for _, v := range hashesFiles {
		var BlockHashes []*BlockHash
		for _, h := range v.BlockHashes {
			BlockHashes = append(BlockHashes, &BlockHash{
				Index:      int32(h.Index),
				StrongHash: h.StrongHash,
				WeakHash:   h.WeakHash,
			})
		}
		reply.FileBlockHashes = append(reply.FileBlockHashes, &FileBlockHash{
			Filename:    v.Filename,
			BlockHashes: BlockHashes,
		})
	}
	fmt.Println("CalculateBlockHash完成")

	return nil
}

// CalculateRSyncOps 22
func (this *RsyncService) CalculateRSyncOps(args *Rpc2Request, reply *Rpc2Response) error {
	//reply.C = args.A - args.B
	fmt.Println("调用store端方法：CalculateRSyncOps")

	fmt.Println("接收到RsyncOps")

	filename := args.Filename
	modifiedLength := args.ModifiedLength

	var rsyncOps []*rsync.RSyncOp
	for _, v := range args.RsyncOpPbs {
		rsyncOps = append(rsyncOps, &rsync.RSyncOp{
			OpCode:     int(v.OpCode),
			Data:       v.Data,
			BlockIndex: int(v.BlockIndex),
		})
	}

	original, err := ioutil.ReadFile(filename)
	if err != nil {
		fmt.Println("未找到远程端文件")
	} else {
		fmt.Println("找到远程端文件2")
	}

	fmt.Println("文件同步中:", filename)

	result := rsync.ApplyOps(original, rsyncOps, modifiedLength)
	err = ioutil.WriteFile(filename, result, 0644)
	if err != nil {
		panic(err)
	}
	fs.PrimFs.LastSyncTime = time.Now()

	fmt.Println("同步文件成功")

	return nil
}
